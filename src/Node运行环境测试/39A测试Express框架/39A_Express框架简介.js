/**
 * 1、Express框架是什么？
 *   使用 npm install express 命令进行下载。
 *   就是一个集成框架，用于后端开发，集成了网络处理，页面渲染，文件路由等功能。主要是处理网络交互，让代码更加简洁。
 * 
 *  1.Express是一个基于Node平台的web应用开发框架，它提供了一系列的强大特性，帮助你创建各种Web应用。
 *       提供了方便简洁的路由定义方式。
 *       对获取HTTP请求参数进行了简化处理。
 *       对模板引擎支持程度高，方便渲染动态HTML页面。
 *       提供了中间件机制有效控制HTTP请求。
 *       拥有大量第三方中间件对功能进行扩展。
 * 
 * 2、Express提供的中间件：
 *    1.中间件就是一堆方法，可以接收客户端发来的请求、可以对请求做出响应，也可以将请求继续交给下一个中间件继续处理。
 *    2.中间件主要由两部分构成，中间件方法以及请求处理函数。中间件方法由Express提供，负责拦截请求，请求处理函数由开发人员提供，负责处理请求。
 *    3.可以针对同一个请求设置多个中间件，对同一个请求进行多次处理。
 *       默认情况下，请求从上到下依次匹配中间件，一旦匹配成功，终止匹配。
 *       可以调用next方法将请求的控制权交给下一个中间件，直到遇到结束请求的中间件。
 *
 *    
 */

// 引入express框架，集成了http框架、sever框架
const express = require('express');
// 创建网站服务器
const app = express();

// 也相当于集成了router框架。
app.get('/' , (req, res) => {
	// send()
	// 1. send方法内部会检测响应内容的类型
	// 2. send方法会自动设置http状态码
	// 3. send方法会帮我们自动设置响应的内容类型及编码
	res.send('Hello. Express');
})

app.get('/zhangsan', (req, res) => {
	res.send({name: '张三', age: 20})
})

/**
 * 二、中间件
 */
app.get('/request', (req, res, next) => {
	req.name = "李四";
	next(); //调用next，传递给下一个中间件处理，如果不再调用next，则表明匹配结束，直接返回给客户端。
})

app.get('/request', (req, res) => {
	res.send('中间件修改：' + req.name)
})

// 监听端口
app.listen(3000);
console.log('网站服务器启动成功');